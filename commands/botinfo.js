const os = require('os');
const fs = require('fs');
const path = require('path');
const { bot_version, codename } = require('../config.json');
const { version } = require('../node_modules/telegraf/package.json'); // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ telegraf
const db = require('../database'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const commandsFolder = path.join(__dirname); // –ü–∞–ø–∫–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏

module.exports = {
  name: 'botinfo',
  handler: async (ctx) => {
    const chatId = ctx.chat.id;
    const username = ctx.message.from.username;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞
    db.get('SELECT * FROM users WHERE chat_id = ?', [chatId], (err, row) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
        return ctx.reply('*‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.*', { parse_mode: 'Markdown' });
      }

      const isPremium = row && row.is_premium ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
      const totalMemory = (os.totalmem() / 1024 / 1024).toFixed(2); // –í –ú–ë
      const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2); // –í –ú–ë
      const usedMemory = (totalMemory - freeMemory).toFixed(2);

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
      const cpus = os.cpus();
      const cpuModel = cpus[0].model;
      const cpuCores = cpus.length;

      // –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
      const getCpuLoad = () => {
        const cpuInfo = os.cpus();

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö —è–¥–µ—Ä
        const cpuTimes = cpuInfo.reduce(
          (acc, cpu) => {
            acc.total += Object.values(cpu.times).reduce((a, b) => a + b, 0);
            acc.idle += cpu.times.idle;
            return acc;
          },
          { total: 0, idle: 0 }
        );

        return { total: cpuTimes.total, idle: cpuTimes.idle };
      };

      const startCpuLoad = getCpuLoad();
      setTimeout(() => {
        const endCpuLoad = getCpuLoad();

        const totalDiff = endCpuLoad.total - startCpuLoad.total;
        const idleDiff = endCpuLoad.idle - startCpuLoad.idle;
        const cpuUsage = ((1 - idleDiff / totalDiff) * 100).toFixed(2); // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
        const commandFiles = fs.readdirSync(commandsFolder).filter(file => file.endsWith('.js'));
        const commandCount = commandFiles.length;

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersPath = path.join(__dirname, '../users.json'); // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        let userCount = 0;
        if (fs.existsSync(usersPath)) {
          const users = JSON.parse(fs.readFileSync(usersPath, 'utf-8'));
          userCount = Object.keys(users).length;
        }

        // –í–µ—Ä—Å–∏–∏
        const nodeVersion = process.version;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const message = `
*üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*

*üñ• –û–ó–£:*
  - –ó–∞–Ω—è—Ç–æ: ${usedMemory} –ú–ë
  - –°–≤–æ–±–æ–¥–Ω–æ: ${freeMemory} –ú–ë
  - –í—Å–µ–≥–æ: ${totalMemory} –ú–ë

*‚öôÔ∏è –¶–ü:*
  - –ú–æ–¥–µ–ª—å: ${cpuModel}
  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: ${cpuCores}
  - –ù–∞–≥—Ä—É–∑–∫–∞: ${cpuUsage}%

*üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${userCount}

*‚ö° –ö–æ–º–∞–Ω–¥—ã:*
  - –í—Å–µ–≥–æ: ${commandCount}

*üì¶ –í–µ—Ä—Å–∏–∏:*
  - Node.js: ${nodeVersion}
  - Telegraf: ${version}
  - –ë–æ—Ç: ${bot_version} (${codename})

*üéñ –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: ${isPremium}*
        `;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        ctx.reply(message, {
          parse_mode: 'Markdown',
        });
      }, 1000); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É CPU
    });
  },
};
