const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require('fs');
const path = require('path');
const { GeminiToken } = require("../config.json");
const genAI = new GoogleGenerativeAI(GeminiToken);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

module.exports = {
  name: 'gemini',
  handler: async (ctx) => {
    const userInput = ctx.message.text.replace('/gemini', '').trim();
    const username = ctx.message.from.username || 'Anonymous';
    const chatId = ctx.chat.id;
    const historyPath = path.join(__dirname, `../history/${chatId}.md`);
    const now = new Date();
    const timestamp = `${now.toLocaleDateString()} ${now.toLocaleTimeString()}`;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª —Ç–µ–∫—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if (!userInput) {
      return ctx.reply(
        '*‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/gemini` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.*\n\n_–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:_',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìú –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: `history_${chatId}` },
                { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: `delete_history_${chatId}` },
              ],
            ],
          },
        }
      );
    }

    try {
      // –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ Gemini
      const response = await model.generateContent(userInput);
      const generatedText = response.response.text() || '‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
      const message = `
*üí¨ –í–æ–ø—Ä–æ—Å:* ${userInput}

*ü§ñ –û—Ç–≤–µ—Ç –æ—Ç Gemini:*
${generatedText}

üåü _–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!_
      `;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      const historyEntry = `
[===@${username}===]
${timestamp} - ${userInput}
[===Gemini===]
${timestamp} - ${generatedText}

`;
      if (!fs.existsSync(path.dirname(historyPath))) {
        fs.mkdirSync(path.dirname(historyPath), { recursive: true });
      }
      fs.appendFileSync(historyPath, historyEntry);

      ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìú –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: `history_${chatId}` },
              { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: `delete_history_${chatId}` },
            ],
          ],
        },
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏ Gemini:', error);
      ctx.reply('*‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*\n_üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ._', {
        parse_mode: 'Markdown',
      });
    }
  },
};
